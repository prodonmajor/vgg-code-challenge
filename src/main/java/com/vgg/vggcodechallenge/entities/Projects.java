package com.vgg.vggcodechallenge.entities;
// Generated 08-Feb-2020 23:40:07 by Hibernate Tools 4.3.1

import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;
import org.apache.lucene.analysis.core.KeywordTokenizerFactory;
import org.apache.lucene.analysis.core.LowerCaseFilterFactory;
import org.apache.lucene.analysis.core.StopFilterFactory;
import org.apache.lucene.analysis.miscellaneous.WordDelimiterFilterFactory;
import org.apache.lucene.analysis.ngram.EdgeNGramFilterFactory;
import org.apache.lucene.analysis.ngram.NGramFilterFactory;
import org.apache.lucene.analysis.pattern.PatternReplaceFilterFactory;
import org.apache.lucene.analysis.standard.StandardTokenizerFactory;
import org.hibernate.search.annotations.Analyze;
import org.hibernate.search.annotations.Analyzer;
import org.hibernate.search.annotations.AnalyzerDef;
import org.hibernate.search.annotations.AnalyzerDefs;
import org.hibernate.search.annotations.DocumentId;
import org.hibernate.search.annotations.Field;
import org.hibernate.search.annotations.Index;
import org.hibernate.search.annotations.Indexed;
import org.hibernate.search.annotations.Parameter;
import org.hibernate.search.annotations.Store;
import org.hibernate.search.annotations.TokenFilterDef;
import org.hibernate.search.annotations.TokenizerDef;

/**
 * Projects generated by hbm2java
 */
@Entity
@Table(name = "projects", uniqueConstraints = @UniqueConstraint(columnNames = "name")
)
@Indexed
@AnalyzerDefs({
    @AnalyzerDef(
            name = "autocompleteEdgeAnalyzer",
            tokenizer = @TokenizerDef(factory = KeywordTokenizerFactory.class),
            filters = {
                @TokenFilterDef(
                        factory = PatternReplaceFilterFactory.class,
                        params = {
                            @Parameter(name = "pattern", value = "([^a-zA-Z0-9\\.])"),
                            @Parameter(name = "replacement", value = " "),
                            @Parameter(name = "replace", value = "all")
                        }
                ),
                @TokenFilterDef(factory = LowerCaseFilterFactory.class),
                @TokenFilterDef(factory = StopFilterFactory.class),
                // index partial words starting at the front
                @TokenFilterDef(
                        factory = EdgeNGramFilterFactory.class,
                        params = {
                            @Parameter(name = "minGramSize", value = "3"),
                            @Parameter(name = "maxGramSize", value = "50")
                        }
                )
            }
    ),
    @AnalyzerDef(
            name = "autocompleteNGramAnalyzer",
            tokenizer = @TokenizerDef(factory = StandardTokenizerFactory.class),
            filters = {
                @TokenFilterDef(
                        factory = PatternReplaceFilterFactory.class,
                        params = {
                            @Parameter(name = "pattern", value = "([^a-zA-Z0-9\\.])"),
                            @Parameter(name = "replacement", value = " "),
                            @Parameter(name = "replace", value = "all")
                        }
                ),
                @TokenFilterDef(factory = WordDelimiterFilterFactory.class),
                @TokenFilterDef(factory = LowerCaseFilterFactory.class),
                // index partial words starting at the front
                @TokenFilterDef(
                        factory = NGramFilterFactory.class,
                        params = {
                            @Parameter(name = "minGramSize", value = "3"),
                            @Parameter(name = "maxGramSize", value = "5")
                        }
                )
            }
    ),
    @AnalyzerDef(
            name = "standardAnalyzer",
            tokenizer = @TokenizerDef(factory = StandardTokenizerFactory.class),
            filters = {
                @TokenFilterDef(
                        factory = PatternReplaceFilterFactory.class,
                        params = {
                            @Parameter(name = "pattern", value = "([^a-zA-Z0-9\\.])"),
                            @Parameter(name = "replacement", value = " "),
                            @Parameter(name = "replace", value = "all")
                        }
                ),
                @TokenFilterDef(factory = WordDelimiterFilterFactory.class),
                @TokenFilterDef(factory = LowerCaseFilterFactory.class)
            }
    )
})
public class Projects implements java.io.Serializable {

    @DocumentId
    private Integer id;
    @Field(index = Index.YES, analyze = Analyze.YES, analyzer = @Analyzer(definition = "standardAnalyzer"), store = Store.NO)
    private String name;
    @Field(index = Index.YES, analyze = Analyze.YES, analyzer = @Analyzer(definition = "standardAnalyzer"), store = Store.NO)
    private String description;
    private Integer completed;
    private String userStories;
    private Set actionses = new HashSet(0);

    public Projects() {
    }

    public Projects(Integer id, String name, String description) {
        this.id = id;
        this.name = name;
        this.description = description;
    }

    public Projects(Integer id, String name, String description, Integer completed, Set actionses, String userStories) {
        this.id = id;
        this.name = name;
        this.description = description;
        this.completed = completed;
        this.actionses = actionses;
        this.userStories = userStories;
    }

    @Id

    @Column(name = "id")
    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    @Column(name = "name", unique = true, nullable = false, length = 2000000000)
    public String getName() {
        return this.name;
    }

    public void setName(String name) {
        this.name = name;
    }

    @Column(name = "description", nullable = false, length = 2000000000)
    public String getDescription() {
        return this.description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    @Column(name = "completed")
    public Integer getCompleted() {
        return this.completed;
    }

    public void setCompleted(Integer completed) {
        this.completed = completed;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "projects")
    public Set getActionses() {
        return this.actionses;
    }

    public void setActionses(Set actionses) {
        this.actionses = actionses;
    }

    @Column(name = "user_stories", length = 2000000000)
    public String getUserStories() {
        return userStories;
    }

    public void setUserStories(String userStories) {
        this.userStories = userStories;
    }

}
